#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"},{"aliases":[],"name":"razor"},{"aliases":[],"name":"xs"},{"aliases":[],"name":"xs-show"}]}}

#!pwsh

$version = "1.2.10"
$config = "Debug"
$nugetPath = "C:\Development\.nuget"
dotnet pack -c $config

copy src\Hyperbee.XS\bin\$config\Hyperbee.XS.$version.nupkg $nugetPath
copy src\Hyperbee.XS.Extensions\bin\$config\Hyperbee.XS.Extensions.$version.nupkg $nugetPath
copy src\Hyperbee.XS.Interactive\bin\$config\Hyperbee.XS.Interactive.$version.nupkg $nugetPath

#!csharp

#i "nuget:C:\Development\.nuget"
#r "nuget:Hyperbee.XS"
#r "nuget:Hyperbee.XS.Extensions"
#r "nuget:Hyperbee.XS.Interactive"

#!xs

source "C:/Development/.nuget";
package Hyperbee.XS.Extensions:"1.2.10";

#!xs

#!extensions --extension ForParseExtension

#!xs

for ( var i = 0; i < 5; i++ )
{
    display(i);
}

#!xs

package Humanizer.Core;
using Humanizer;
using System.Collections.Generic;

var x = 1+5;
var y = 10;
var b = new Dictionary<string, int>();

b["x"] = x;
b["y"] = 42;

x;

#!xs

var y = "hi";
y;

#!xs

display( ( x + 123 ).ToWords() );
display( b, "application/json" );
x;

#!xs-show

if( true ) 1+5; else 0;

#!csharp

var simple = "hello";
display(simple);

class Person {
    public string Name { get; set; }
    public int Age { get; set; }
}

var complex = new Person { Name = "John", Age = 30 };
display(complex);

#!xs

#!share --from csharp --name "simple" --as "zSimple"
#!share --from csharp --name "complex" --as "zComplex"

display(zSimple);
zComplex.Name;

#!xs

#!whos

#!csharp

#r "nuget:Parlot"

#!csharp

using System.Collections.ObjectModel;
using System.Linq.Expressions;
using Hyperbee.Collections;
using Hyperbee.Expressions;
using Hyperbee.XS;
using Hyperbee.XS.Core;
using Hyperbee.XS.Core.Parsers;
using Hyperbee.XS.Core.Writer;
using Parlot.Fluent;
using static Parlot.Fluent.Parsers;


public class RepeatExpression : Expression
{
    public override ExpressionType NodeType => ExpressionType.Extension;
    public override Type Type => typeof(void);

    public Expression Count { get; }
    public Expression Body { get; }

    public RepeatExpression(Expression count, Expression body)
    {
        Count = count;
        Body = body;
    }

    public override Expression Reduce()
    {
        var loopVariable = Expression.Parameter(typeof(int), "i");

        return Expression.Block(
            new[] { loopVariable },
            Expression.Assign(loopVariable, Expression.Constant(0)),
            Expression.Loop(
                Expression.IfThenElse(
                    Expression.LessThan(loopVariable, Count),
                    Expression.Block(Body, Expression.PostIncrementAssign(loopVariable)),
                    Expression.Break(Expression.Label())
                )
            )
        );
    }
}

public class RepeatParseExtension : IParseExtension
{
    public ExtensionType Type => ExtensionType.Expression;
    public string Key => "repeat";

    public Parser<Expression> CreateParser( ExtensionBinder binder )
    {
        var (expression, statement) = binder;

        return Between(
            Terms.Char('('),
            expression,
            Terms.Char(')')
        )
        .And( 
             Between(
                Terms.Char('{'),
                statement,
                Terms.Char('}')
            )
        )
        .Then<Expression>( static parts =>
        {
            var (countExpression, body) = parts;
            return new RepeatExpression(countExpression, body);
        });
    }
}

#!xs

#!extensions --from csharp --name "RepeatParseExtension"
